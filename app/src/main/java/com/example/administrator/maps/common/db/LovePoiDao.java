package com.example.administrator.maps.common.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.administrator.maps.main.model.LovePoi;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOVE_POI".
*/
public class LovePoiDao extends AbstractDao<LovePoi, String> {

    public static final String TABLENAME = "LOVE_POI";

    /**
     * Properties of entity LovePoi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PoiId = new Property(0, String.class, "poiId", true, "POI_ID");
        public final static Property AdCode = new Property(1, String.class, "adCode", false, "AD_CODE");
        public final static Property AdName = new Property(2, String.class, "adName", false, "AD_NAME");
        public final static Property BusinessArea = new Property(3, String.class, "businessArea", false, "BUSINESS_AREA");
        public final static Property CityCode = new Property(4, String.class, "cityCode", false, "CITY_CODE");
        public final static Property CityName = new Property(5, String.class, "cityName", false, "CITY_NAME");
        public final static Property Direction = new Property(6, String.class, "direction", false, "DIRECTION");
        public final static Property Distance = new Property(7, int.class, "distance", false, "DISTANCE");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property Lat = new Property(9, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(10, double.class, "lng", false, "LNG");
        public final static Property ParkingType = new Property(11, String.class, "parkingType", false, "PARKING_TYPE");
        public final static Property Photos = new Property(12, String.class, "photos", false, "PHOTOS");
        public final static Property PoiExtension = new Property(13, String.class, "poiExtension", false, "POI_EXTENSION");
        public final static Property Postcode = new Property(14, String.class, "postcode", false, "POSTCODE");
        public final static Property ProvinceCode = new Property(15, String.class, "provinceCode", false, "PROVINCE_CODE");
        public final static Property ProvinceName = new Property(16, String.class, "provinceName", false, "PROVINCE_NAME");
        public final static Property Snippet = new Property(17, String.class, "snippet", false, "SNIPPET");
        public final static Property Tel = new Property(18, String.class, "tel", false, "TEL");
        public final static Property Title = new Property(19, String.class, "title", false, "TITLE");
        public final static Property TypeCode = new Property(20, String.class, "typeCode", false, "TYPE_CODE");
        public final static Property TypeDes = new Property(21, String.class, "typeDes", false, "TYPE_DES");
        public final static Property Website = new Property(22, String.class, "website", false, "WEBSITE");
        public final static Property SortId = new Property(23, Long.class, "sortId", false, "SORT_ID");
    }

    private Query<LovePoi> sortBean_LovePoisQuery;

    public LovePoiDao(DaoConfig config) {
        super(config);
    }
    
    public LovePoiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOVE_POI\" (" + //
                "\"POI_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: poiId
                "\"AD_CODE\" TEXT," + // 1: adCode
                "\"AD_NAME\" TEXT," + // 2: adName
                "\"BUSINESS_AREA\" TEXT," + // 3: businessArea
                "\"CITY_CODE\" TEXT," + // 4: cityCode
                "\"CITY_NAME\" TEXT," + // 5: cityName
                "\"DIRECTION\" TEXT," + // 6: direction
                "\"DISTANCE\" INTEGER NOT NULL ," + // 7: distance
                "\"EMAIL\" TEXT," + // 8: email
                "\"LAT\" REAL NOT NULL ," + // 9: lat
                "\"LNG\" REAL NOT NULL ," + // 10: lng
                "\"PARKING_TYPE\" TEXT," + // 11: parkingType
                "\"PHOTOS\" TEXT," + // 12: photos
                "\"POI_EXTENSION\" TEXT," + // 13: poiExtension
                "\"POSTCODE\" TEXT," + // 14: postcode
                "\"PROVINCE_CODE\" TEXT," + // 15: provinceCode
                "\"PROVINCE_NAME\" TEXT," + // 16: provinceName
                "\"SNIPPET\" TEXT," + // 17: snippet
                "\"TEL\" TEXT," + // 18: tel
                "\"TITLE\" TEXT," + // 19: title
                "\"TYPE_CODE\" TEXT," + // 20: typeCode
                "\"TYPE_DES\" TEXT," + // 21: typeDes
                "\"WEBSITE\" TEXT," + // 22: website
                "\"SORT_ID\" INTEGER);"); // 23: sortId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOVE_POI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LovePoi entity) {
        stmt.clearBindings();
 
        String poiId = entity.getPoiId();
        if (poiId != null) {
            stmt.bindString(1, poiId);
        }
 
        String adCode = entity.getAdCode();
        if (adCode != null) {
            stmt.bindString(2, adCode);
        }
 
        String adName = entity.getAdName();
        if (adName != null) {
            stmt.bindString(3, adName);
        }
 
        String businessArea = entity.getBusinessArea();
        if (businessArea != null) {
            stmt.bindString(4, businessArea);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(5, cityCode);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(6, cityName);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(7, direction);
        }
        stmt.bindLong(8, entity.getDistance());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
        stmt.bindDouble(10, entity.getLat());
        stmt.bindDouble(11, entity.getLng());
 
        String parkingType = entity.getParkingType();
        if (parkingType != null) {
            stmt.bindString(12, parkingType);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(13, photos);
        }
 
        String poiExtension = entity.getPoiExtension();
        if (poiExtension != null) {
            stmt.bindString(14, poiExtension);
        }
 
        String postcode = entity.getPostcode();
        if (postcode != null) {
            stmt.bindString(15, postcode);
        }
 
        String provinceCode = entity.getProvinceCode();
        if (provinceCode != null) {
            stmt.bindString(16, provinceCode);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(17, provinceName);
        }
 
        String snippet = entity.getSnippet();
        if (snippet != null) {
            stmt.bindString(18, snippet);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(19, tel);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(20, title);
        }
 
        String typeCode = entity.getTypeCode();
        if (typeCode != null) {
            stmt.bindString(21, typeCode);
        }
 
        String typeDes = entity.getTypeDes();
        if (typeDes != null) {
            stmt.bindString(22, typeDes);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(23, website);
        }
 
        Long sortId = entity.getSortId();
        if (sortId != null) {
            stmt.bindLong(24, sortId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LovePoi entity) {
        stmt.clearBindings();
 
        String poiId = entity.getPoiId();
        if (poiId != null) {
            stmt.bindString(1, poiId);
        }
 
        String adCode = entity.getAdCode();
        if (adCode != null) {
            stmt.bindString(2, adCode);
        }
 
        String adName = entity.getAdName();
        if (adName != null) {
            stmt.bindString(3, adName);
        }
 
        String businessArea = entity.getBusinessArea();
        if (businessArea != null) {
            stmt.bindString(4, businessArea);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(5, cityCode);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(6, cityName);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(7, direction);
        }
        stmt.bindLong(8, entity.getDistance());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
        stmt.bindDouble(10, entity.getLat());
        stmt.bindDouble(11, entity.getLng());
 
        String parkingType = entity.getParkingType();
        if (parkingType != null) {
            stmt.bindString(12, parkingType);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(13, photos);
        }
 
        String poiExtension = entity.getPoiExtension();
        if (poiExtension != null) {
            stmt.bindString(14, poiExtension);
        }
 
        String postcode = entity.getPostcode();
        if (postcode != null) {
            stmt.bindString(15, postcode);
        }
 
        String provinceCode = entity.getProvinceCode();
        if (provinceCode != null) {
            stmt.bindString(16, provinceCode);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(17, provinceName);
        }
 
        String snippet = entity.getSnippet();
        if (snippet != null) {
            stmt.bindString(18, snippet);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(19, tel);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(20, title);
        }
 
        String typeCode = entity.getTypeCode();
        if (typeCode != null) {
            stmt.bindString(21, typeCode);
        }
 
        String typeDes = entity.getTypeDes();
        if (typeDes != null) {
            stmt.bindString(22, typeDes);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(23, website);
        }
 
        Long sortId = entity.getSortId();
        if (sortId != null) {
            stmt.bindLong(24, sortId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LovePoi readEntity(Cursor cursor, int offset) {
        LovePoi entity = new LovePoi( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // poiId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // adCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // adName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // businessArea
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cityCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cityName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // direction
            cursor.getInt(offset + 7), // distance
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.getDouble(offset + 9), // lat
            cursor.getDouble(offset + 10), // lng
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // parkingType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // photos
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // poiExtension
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // postcode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // provinceCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // provinceName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // snippet
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // tel
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // title
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // typeCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // typeDes
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // website
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23) // sortId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LovePoi entity, int offset) {
        entity.setPoiId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAdCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBusinessArea(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCityCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCityName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDirection(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDistance(cursor.getInt(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLat(cursor.getDouble(offset + 9));
        entity.setLng(cursor.getDouble(offset + 10));
        entity.setParkingType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhotos(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPoiExtension(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPostcode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProvinceCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setProvinceName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSnippet(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTel(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTitle(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTypeCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTypeDes(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setWebsite(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSortId(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LovePoi entity, long rowId) {
        return entity.getPoiId();
    }
    
    @Override
    public String getKey(LovePoi entity) {
        if(entity != null) {
            return entity.getPoiId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LovePoi entity) {
        return entity.getPoiId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lovePois" to-many relationship of SortBean. */
    public List<LovePoi> _querySortBean_LovePois(Long sortId) {
        synchronized (this) {
            if (sortBean_LovePoisQuery == null) {
                QueryBuilder<LovePoi> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SortId.eq(null));
                sortBean_LovePoisQuery = queryBuilder.build();
            }
        }
        Query<LovePoi> query = sortBean_LovePoisQuery.forCurrentThread();
        query.setParameter(0, sortId);
        return query.list();
    }

}
